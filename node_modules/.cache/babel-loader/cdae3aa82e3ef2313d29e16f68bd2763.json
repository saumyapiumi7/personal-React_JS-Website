{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\User\\\\WebstormProjects\\\\personal-React_JS-Website\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\WebstormProjects\\\\personal-React_JS-Website\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\WebstormProjects\\\\personal-React_JS-Website\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Grabber = void 0;\n\nvar Utils_1 = require(\"../../../../Utils\");\n\nvar Modes_1 = require(\"../../../../Enums/Modes\");\n\nvar Grabber = /*#__PURE__*/function () {\n  function Grabber(container) {\n    _classCallCheck(this, Grabber);\n\n    this.container = container;\n  }\n\n  _createClass(Grabber, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container;\n      var mouse = container.interactivity.mouse;\n      var events = container.options.interactivity.events;\n\n      if (!(events.onHover.enable && mouse.position)) {\n        return false;\n      }\n\n      var hoverMode = events.onHover.mode;\n      return Utils_1.Utils.isInArray(Modes_1.HoverMode.grab, hoverMode);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function interact() {\n      var _a, _b;\n\n      var container = this.container;\n      var options = container.options;\n      var interactivity = options.interactivity;\n\n      if (interactivity.events.onHover.enable && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n        var mousePos = container.interactivity.mouse.position;\n\n        if (mousePos === undefined) {\n          return;\n        }\n\n        var distance = container.retina.grabModeDistance;\n        var query = container.particles.quadTree.query(new Utils_1.Circle(mousePos.x, mousePos.y, distance));\n\n        var _iterator = _createForOfIteratorHelper(query),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var particle = _step.value;\n            var pos = particle.getPosition();\n\n            var _distance = Utils_1.Utils.getDistance(pos, mousePos);\n\n            if (_distance <= container.retina.grabModeDistance) {\n              var grabLineOptions = interactivity.modes.grab.links;\n              var lineOpacity = grabLineOptions.opacity;\n              var grabDistance = container.retina.grabModeDistance;\n              var opacityLine = lineOpacity - _distance * lineOpacity / grabDistance;\n\n              if (opacityLine > 0) {\n                var optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.particlesOptions.links.color;\n\n                if (!container.particles.grabLineColor) {\n                  container.particles.grabLineColor = optColor === Utils_1.Constants.randomColorValue || ((_b = optColor) === null || _b === void 0 ? void 0 : _b.value) === Utils_1.Constants.randomColorValue ? Utils_1.Constants.randomColorValue : Utils_1.ColorUtils.colorToRgb(optColor);\n                }\n\n                var colorLine = void 0;\n\n                if (container.particles.grabLineColor === Utils_1.Constants.randomColorValue) {\n                  colorLine = Utils_1.ColorUtils.getRandomRgbColor();\n                } else {\n                  colorLine = container.particles.grabLineColor;\n                }\n\n                if (colorLine === undefined) {\n                  return;\n                }\n\n                container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n              }\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }]);\n\n  return Grabber;\n}();\n\nexports.Grabber = Grabber;","map":{"version":3,"sources":["C:/Users/User/WebstormProjects/personal-React_JS-Website/node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js"],"names":["Object","defineProperty","exports","value","Grabber","Utils_1","require","Modes_1","container","mouse","interactivity","events","options","onHover","enable","position","hoverMode","mode","Utils","isInArray","HoverMode","grab","_a","_b","status","Constants","mouseMoveEvent","mousePos","undefined","distance","retina","grabModeDistance","query","particles","quadTree","Circle","x","y","particle","pos","getPosition","getDistance","grabLineOptions","modes","links","lineOpacity","opacity","grabDistance","opacityLine","optColor","color","particlesOptions","grabLineColor","randomColorValue","ColorUtils","colorToRgb","colorLine","getRandomRgbColor","canvas","drawGrabLine"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Grabber = void 0;\nconst Utils_1 = require(\"../../../../Utils\");\nconst Modes_1 = require(\"../../../../Enums/Modes\");\nclass Grabber {\n    constructor(container) {\n        this.container = container;\n    }\n    isEnabled() {\n        const container = this.container;\n        const mouse = container.interactivity.mouse;\n        const events = container.options.interactivity.events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        return Utils_1.Utils.isInArray(Modes_1.HoverMode.grab, hoverMode);\n    }\n    reset() {\n    }\n    interact() {\n        var _a, _b;\n        const container = this.container;\n        const options = container.options;\n        const interactivity = options.interactivity;\n        if (interactivity.events.onHover.enable && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n            const mousePos = container.interactivity.mouse.position;\n            if (mousePos === undefined) {\n                return;\n            }\n            const distance = container.retina.grabModeDistance;\n            const query = container.particles.quadTree.query(new Utils_1.Circle(mousePos.x, mousePos.y, distance));\n            for (const particle of query) {\n                const pos = particle.getPosition();\n                const distance = Utils_1.Utils.getDistance(pos, mousePos);\n                if (distance <= container.retina.grabModeDistance) {\n                    const grabLineOptions = interactivity.modes.grab.links;\n                    const lineOpacity = grabLineOptions.opacity;\n                    const grabDistance = container.retina.grabModeDistance;\n                    const opacityLine = lineOpacity - (distance * lineOpacity) / grabDistance;\n                    if (opacityLine > 0) {\n                        const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.particlesOptions.links.color;\n                        if (!container.particles.grabLineColor) {\n                            container.particles.grabLineColor =\n                                optColor === Utils_1.Constants.randomColorValue ||\n                                    ((_b = optColor) === null || _b === void 0 ? void 0 : _b.value) === Utils_1.Constants.randomColorValue\n                                    ? Utils_1.Constants.randomColorValue\n                                    : Utils_1.ColorUtils.colorToRgb(optColor);\n                        }\n                        let colorLine;\n                        if (container.particles.grabLineColor === Utils_1.Constants.randomColorValue) {\n                            colorLine = Utils_1.ColorUtils.getRandomRgbColor();\n                        }\n                        else {\n                            colorLine = container.particles.grabLineColor;\n                        }\n                        if (colorLine === undefined) {\n                            return;\n                        }\n                        container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n                    }\n                }\n            }\n        }\n    }\n}\nexports.Grabber = Grabber;\n"]},"metadata":{},"sourceType":"script"}