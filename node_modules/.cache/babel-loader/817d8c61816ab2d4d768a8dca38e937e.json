{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\User\\\\WebstormProjects\\\\personal-React_JS-Website\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\WebstormProjects\\\\personal-React_JS-Website\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\WebstormProjects\\\\personal-React_JS-Website\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Canvas = void 0;\n\nvar Utils_1 = require(\"../Utils\");\n\nvar Canvas = /*#__PURE__*/function () {\n  function Canvas(container) {\n    _classCallCheck(this, Canvas);\n\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this.context = null;\n    this.generatedCanvas = false;\n  }\n\n  _createClass(Canvas, [{\n    key: \"init\",\n    value: function init() {\n      this.resize();\n      var options = this.container.options;\n      var cover = options.backgroundMask.cover;\n      var color = cover.color;\n      var trail = options.particles.move.trail;\n      this.coverColor = Utils_1.ColorUtils.colorToRgb(color);\n      this.trailFillColor = Utils_1.ColorUtils.colorToRgb(trail.fillColor);\n      this.paint();\n    }\n  }, {\n    key: \"loadCanvas\",\n    value: function loadCanvas(canvas, generatedCanvas) {\n      var _a;\n\n      if (!canvas.className) {\n        canvas.className = Utils_1.Constants.canvasClass;\n      }\n\n      if (this.generatedCanvas) {\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n      }\n\n      this.generatedCanvas = generatedCanvas !== null && generatedCanvas !== void 0 ? generatedCanvas : false;\n      this.element = canvas;\n      this.size.height = canvas.offsetHeight;\n      this.size.width = canvas.offsetWidth;\n      this.context = this.element.getContext(\"2d\");\n      this.container.retina.init();\n      this.initBackground();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _a;\n\n      if (this.generatedCanvas) {\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n      }\n\n      if (this.context) {\n        Utils_1.CanvasUtils.clear(this.context, this.size);\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      if (!this.element) {\n        return;\n      }\n\n      this.element.width = this.size.width;\n      this.element.height = this.size.height;\n    }\n  }, {\n    key: \"paint\",\n    value: function paint() {\n      var options = this.container.options;\n\n      if (this.context) {\n        if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n          this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.coverColor));\n        } else {\n          this.paintBase();\n        }\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var options = this.container.options;\n      var trail = options.particles.move.trail;\n\n      if (options.backgroundMask.enable) {\n        this.paint();\n      } else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n        this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n      } else if (this.context) {\n        Utils_1.CanvasUtils.clear(this.context, this.size);\n      }\n    }\n  }, {\n    key: \"drawLinkTriangle\",\n    value: function drawLinkTriangle(p1, link1, link2) {\n      var _a, _b;\n\n      var container = this.container;\n      var options = container.options;\n      var p2 = link1.destination;\n      var p3 = link2.destination;\n      var triangleOptions = p1.particlesOptions.links.triangles;\n      var opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n      var pos1 = p1.getPosition();\n      var pos2 = p2.getPosition();\n      var pos3 = p3.getPosition();\n      var ctx = this.context;\n\n      if (!ctx) {\n        return;\n      }\n\n      var colorTriangle = Utils_1.ColorUtils.colorToRgb(triangleOptions.color);\n\n      if (!colorTriangle) {\n        var linksOptions = p1.particlesOptions.links;\n        var linkColor = linksOptions.id !== undefined ? container.particles.linksColors[linksOptions.id] : container.particles.linksColor;\n\n        if (linkColor === Utils_1.Constants.randomColorValue) {\n          colorTriangle = Utils_1.ColorUtils.getRandomRgbColor();\n        } else if (linkColor === \"mid\") {\n          var sourceColor = p1.getColor();\n          var destColor = p2.getColor();\n\n          if (sourceColor && destColor) {\n            colorTriangle = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n          } else {\n            var hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n\n            if (!hslColor) {\n              return;\n            }\n\n            colorTriangle = Utils_1.ColorUtils.hslToRgb(hslColor);\n          }\n        } else {\n          colorTriangle = linkColor;\n        }\n      }\n\n      var width = (_b = p1.linksWidth) !== null && _b !== void 0 ? _b : container.retina.linksWidth;\n      Utils_1.CanvasUtils.drawLinkTriangle(ctx, width, pos1, pos2, pos3, options.backgroundMask.enable, colorTriangle, opacityTriangle);\n    }\n  }, {\n    key: \"drawLinkLine\",\n    value: function drawLinkLine(p1, link) {\n      var _a;\n\n      var container = this.container;\n      var options = container.options;\n      var p2 = link.destination;\n      var opacity = link.opacity;\n      var pos1 = p1.getPosition();\n      var pos2 = p2.getPosition();\n      var ctx = this.context;\n\n      if (!ctx) {\n        return;\n      }\n\n      var colorLine;\n      var twinkle = p1.particlesOptions.twinkle.lines;\n\n      if (twinkle.enable) {\n        var twinkleFreq = twinkle.frequency;\n        var twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n        var twinkling = Math.random() < twinkleFreq;\n\n        if (twinkling && twinkleRgb !== undefined) {\n          colorLine = twinkleRgb;\n          opacity = twinkle.opacity;\n        }\n      }\n\n      if (!colorLine) {\n        var linksOptions = p1.particlesOptions.links;\n        var linkColor = linksOptions.id !== undefined ? container.particles.linksColors[linksOptions.id] : container.particles.linksColor;\n\n        if (linkColor === Utils_1.Constants.randomColorValue) {\n          colorLine = Utils_1.ColorUtils.getRandomRgbColor();\n        } else if (linkColor === \"mid\") {\n          var sourceColor = p1.getColor();\n          var destColor = p2.getColor();\n\n          if (sourceColor && destColor) {\n            colorLine = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n          } else {\n            var hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n\n            if (!hslColor) {\n              return;\n            }\n\n            colorLine = Utils_1.ColorUtils.hslToRgb(hslColor);\n          }\n        } else {\n          colorLine = linkColor;\n        }\n      }\n\n      var width = (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth;\n      Utils_1.CanvasUtils.drawLinkLine(ctx, width, pos1, pos2, p1.particlesOptions.links.distance, container.canvas.size, p1.particlesOptions.links.warp, options.backgroundMask.enable, colorLine, opacity, p1.particlesOptions.links.shadow);\n    }\n  }, {\n    key: \"drawConnectLine\",\n    value: function drawConnectLine(p1, p2) {\n      var _a;\n\n      var lineStyle = this.lineStyle(p1, p2);\n\n      if (!lineStyle) {\n        return;\n      }\n\n      var ctx = this.context;\n\n      if (!ctx) {\n        return;\n      }\n\n      var pos1 = p1.getPosition();\n      var pos2 = p2.getPosition();\n      Utils_1.CanvasUtils.drawConnectLine(ctx, (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n    }\n  }, {\n    key: \"drawGrabLine\",\n    value: function drawGrabLine(particle, lineColor, opacity, mousePos) {\n      var _a;\n\n      var container = this.container;\n      var ctx = container.canvas.context;\n\n      if (!ctx) {\n        return;\n      }\n\n      var beginPos = particle.getPosition();\n      Utils_1.CanvasUtils.drawGrabLine(ctx, (_a = particle.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n    }\n  }, {\n    key: \"drawParticle\",\n    value: function drawParticle(particle, delta) {\n      var _this = this;\n\n      var _a, _b;\n\n      var pColor = particle.getColor();\n\n      if (pColor === undefined) {\n        return;\n      }\n\n      var options = this.container.options;\n      var twinkle = particle.particlesOptions.twinkle.particles;\n      var twinkleFreq = twinkle.frequency;\n      var twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n      var twinkling = twinkle.enable && Math.random() < twinkleFreq;\n      var radius = (_a = particle.bubble.radius) !== null && _a !== void 0 ? _a : particle.size.value;\n      var opacity = twinkling ? twinkle.opacity : (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : particle.opacity.value;\n      var infectionStage = particle.infectionStage;\n      var infection = options.infection;\n      var infectionStages = infection.stages;\n      var infectionColor = infectionStage !== undefined ? infectionStages[infectionStage].color : undefined;\n      var infectionRgb = Utils_1.ColorUtils.colorToRgb(infectionColor);\n      var color = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : Utils_1.ColorUtils.hslToRgb(pColor);\n      var colorValue = color !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(color, opacity) : undefined;\n\n      if (!this.context || !colorValue) {\n        return;\n      }\n\n      if (particle.links.length > 0) {\n        this.context.save();\n\n        var _iterator = _createForOfIteratorHelper(particle.links),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var link = _step.value;\n\n            if (particle.particlesOptions.links.triangles.enable) {\n              (function () {\n                var links = particle.links.map(function (l) {\n                  return l.destination;\n                });\n                var vertices = link.destination.links.filter(function (t) {\n                  return links.indexOf(t.destination) >= 0;\n                });\n\n                if (vertices.length) {\n                  var _iterator2 = _createForOfIteratorHelper(vertices),\n                      _step2;\n\n                  try {\n                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                      var vertice = _step2.value;\n\n                      _this.drawLinkTriangle(particle, link, vertice);\n                    }\n                  } catch (err) {\n                    _iterator2.e(err);\n                  } finally {\n                    _iterator2.f();\n                  }\n                }\n              })();\n            }\n\n            this.drawLinkLine(particle, link);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this.context.restore();\n      }\n\n      Utils_1.CanvasUtils.drawParticle(this.container, this.context, particle, delta, colorValue, options.backgroundMask.enable, radius, opacity, particle.particlesOptions.shadow);\n    }\n  }, {\n    key: \"drawPlugin\",\n    value: function drawPlugin(plugin, delta) {\n      if (!this.context) {\n        return;\n      }\n\n      Utils_1.CanvasUtils.drawPlugin(this.context, plugin, delta);\n    }\n  }, {\n    key: \"paintBase\",\n    value: function paintBase(baseColor) {\n      if (this.context) {\n        Utils_1.CanvasUtils.paintBase(this.context, this.size, baseColor);\n      }\n    }\n  }, {\n    key: \"lineStyle\",\n    value: function lineStyle(p1, p2) {\n      var options = this.container.options;\n      var connectOptions = options.interactivity.modes.connect;\n\n      if (this.context) {\n        return Utils_1.CanvasUtils.gradient(this.context, p1, p2, connectOptions.links.opacity);\n      }\n    }\n  }, {\n    key: \"initBackground\",\n    value: function initBackground() {\n      var options = this.container.options;\n      var background = options.background;\n      var element = this.element;\n\n      if (!element) {\n        return;\n      }\n\n      var elementStyle = element.style;\n\n      if (background.color) {\n        var color = Utils_1.ColorUtils.colorToRgb(background.color);\n\n        if (color) {\n          elementStyle.backgroundColor = Utils_1.ColorUtils.getStyleFromRgb(color, background.opacity);\n        }\n      }\n\n      if (background.image) {\n        elementStyle.backgroundImage = background.image;\n      }\n\n      if (background.position) {\n        elementStyle.backgroundPosition = background.position;\n      }\n\n      if (background.repeat) {\n        elementStyle.backgroundRepeat = background.repeat;\n      }\n\n      if (background.size) {\n        elementStyle.backgroundSize = background.size;\n      }\n    }\n  }]);\n\n  return Canvas;\n}();\n\nexports.Canvas = Canvas;","map":{"version":3,"sources":["C:/Users/User/WebstormProjects/personal-React_JS-Website/node_modules/tsparticles/dist/Core/Canvas.js"],"names":["Object","defineProperty","exports","value","Canvas","Utils_1","require","container","size","height","width","context","generatedCanvas","resize","options","cover","backgroundMask","color","trail","particles","move","coverColor","ColorUtils","colorToRgb","trailFillColor","fillColor","paint","canvas","_a","className","Constants","canvasClass","element","remove","offsetHeight","offsetWidth","getContext","retina","init","initBackground","CanvasUtils","clear","enable","paintBase","getStyleFromRgb","length","p1","link1","link2","_b","p2","destination","p3","triangleOptions","particlesOptions","links","triangles","opacityTriangle","opacity","pos1","getPosition","pos2","pos3","ctx","colorTriangle","linksOptions","linkColor","id","undefined","linksColors","linksColor","randomColorValue","getRandomRgbColor","sourceColor","getColor","destColor","mix","hslColor","hslToRgb","linksWidth","drawLinkTriangle","link","colorLine","twinkle","lines","twinkleFreq","frequency","twinkleRgb","twinkling","Math","random","drawLinkLine","distance","warp","shadow","lineStyle","drawConnectLine","particle","lineColor","mousePos","beginPos","drawGrabLine","delta","pColor","radius","bubble","infectionStage","infection","infectionStages","stages","infectionColor","infectionRgb","colorValue","save","map","l","vertices","filter","t","indexOf","vertice","restore","drawParticle","plugin","drawPlugin","baseColor","connectOptions","interactivity","modes","connect","gradient","background","elementStyle","style","backgroundColor","image","backgroundImage","position","backgroundPosition","repeat","backgroundRepeat","backgroundSize"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Canvas = void 0;\nconst Utils_1 = require(\"../Utils\");\nclass Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this.context = null;\n        this.generatedCanvas = false;\n    }\n    init() {\n        this.resize();\n        const options = this.container.options;\n        const cover = options.backgroundMask.cover;\n        const color = cover.color;\n        const trail = options.particles.move.trail;\n        this.coverColor = Utils_1.ColorUtils.colorToRgb(color);\n        this.trailFillColor = Utils_1.ColorUtils.colorToRgb(trail.fillColor);\n        this.paint();\n    }\n    loadCanvas(canvas, generatedCanvas) {\n        var _a;\n        if (!canvas.className) {\n            canvas.className = Utils_1.Constants.canvasClass;\n        }\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.generatedCanvas = generatedCanvas !== null && generatedCanvas !== void 0 ? generatedCanvas : false;\n        this.element = canvas;\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this.context = this.element.getContext(\"2d\");\n        this.container.retina.init();\n        this.initBackground();\n    }\n    destroy() {\n        var _a;\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        if (this.context) {\n            Utils_1.CanvasUtils.clear(this.context, this.size);\n        }\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        this.element.width = this.size.width;\n        this.element.height = this.size.height;\n    }\n    paint() {\n        const options = this.container.options;\n        if (this.context) {\n            if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n                this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.coverColor));\n            }\n            else {\n                this.paintBase();\n            }\n        }\n    }\n    clear() {\n        const options = this.container.options;\n        const trail = options.particles.move.trail;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n            this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n        }\n        else if (this.context) {\n            Utils_1.CanvasUtils.clear(this.context, this.size);\n        }\n    }\n    drawLinkTriangle(p1, link1, link2) {\n        var _a, _b;\n        const container = this.container;\n        const options = container.options;\n        const p2 = link1.destination;\n        const p3 = link2.destination;\n        const triangleOptions = p1.particlesOptions.links.triangles;\n        const opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n        const pos1 = p1.getPosition();\n        const pos2 = p2.getPosition();\n        const pos3 = p3.getPosition();\n        const ctx = this.context;\n        if (!ctx) {\n            return;\n        }\n        let colorTriangle = Utils_1.ColorUtils.colorToRgb(triangleOptions.color);\n        if (!colorTriangle) {\n            const linksOptions = p1.particlesOptions.links;\n            const linkColor = linksOptions.id !== undefined\n                ? container.particles.linksColors[linksOptions.id]\n                : container.particles.linksColor;\n            if (linkColor === Utils_1.Constants.randomColorValue) {\n                colorTriangle = Utils_1.ColorUtils.getRandomRgbColor();\n            }\n            else if (linkColor === \"mid\") {\n                const sourceColor = p1.getColor();\n                const destColor = p2.getColor();\n                if (sourceColor && destColor) {\n                    colorTriangle = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n                }\n                else {\n                    const hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n                    if (!hslColor) {\n                        return;\n                    }\n                    colorTriangle = Utils_1.ColorUtils.hslToRgb(hslColor);\n                }\n            }\n            else {\n                colorTriangle = linkColor;\n            }\n        }\n        const width = (_b = p1.linksWidth) !== null && _b !== void 0 ? _b : container.retina.linksWidth;\n        Utils_1.CanvasUtils.drawLinkTriangle(ctx, width, pos1, pos2, pos3, options.backgroundMask.enable, colorTriangle, opacityTriangle);\n    }\n    drawLinkLine(p1, link) {\n        var _a;\n        const container = this.container;\n        const options = container.options;\n        const p2 = link.destination;\n        let opacity = link.opacity;\n        const pos1 = p1.getPosition();\n        const pos2 = p2.getPosition();\n        const ctx = this.context;\n        if (!ctx) {\n            return;\n        }\n        let colorLine;\n        const twinkle = p1.particlesOptions.twinkle.lines;\n        if (twinkle.enable) {\n            const twinkleFreq = twinkle.frequency;\n            const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n            const twinkling = Math.random() < twinkleFreq;\n            if (twinkling && twinkleRgb !== undefined) {\n                colorLine = twinkleRgb;\n                opacity = twinkle.opacity;\n            }\n        }\n        if (!colorLine) {\n            const linksOptions = p1.particlesOptions.links;\n            const linkColor = linksOptions.id !== undefined\n                ? container.particles.linksColors[linksOptions.id]\n                : container.particles.linksColor;\n            if (linkColor === Utils_1.Constants.randomColorValue) {\n                colorLine = Utils_1.ColorUtils.getRandomRgbColor();\n            }\n            else if (linkColor === \"mid\") {\n                const sourceColor = p1.getColor();\n                const destColor = p2.getColor();\n                if (sourceColor && destColor) {\n                    colorLine = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n                }\n                else {\n                    const hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n                    if (!hslColor) {\n                        return;\n                    }\n                    colorLine = Utils_1.ColorUtils.hslToRgb(hslColor);\n                }\n            }\n            else {\n                colorLine = linkColor;\n            }\n        }\n        const width = (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth;\n        Utils_1.CanvasUtils.drawLinkLine(ctx, width, pos1, pos2, p1.particlesOptions.links.distance, container.canvas.size, p1.particlesOptions.links.warp, options.backgroundMask.enable, colorLine, opacity, p1.particlesOptions.links.shadow);\n    }\n    drawConnectLine(p1, p2) {\n        var _a;\n        const lineStyle = this.lineStyle(p1, p2);\n        if (!lineStyle) {\n            return;\n        }\n        const ctx = this.context;\n        if (!ctx) {\n            return;\n        }\n        const pos1 = p1.getPosition();\n        const pos2 = p2.getPosition();\n        Utils_1.CanvasUtils.drawConnectLine(ctx, (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n    }\n    drawGrabLine(particle, lineColor, opacity, mousePos) {\n        var _a;\n        const container = this.container;\n        const ctx = container.canvas.context;\n        if (!ctx) {\n            return;\n        }\n        const beginPos = particle.getPosition();\n        Utils_1.CanvasUtils.drawGrabLine(ctx, (_a = particle.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n    }\n    drawParticle(particle, delta) {\n        var _a, _b;\n        const pColor = particle.getColor();\n        if (pColor === undefined) {\n            return;\n        }\n        const options = this.container.options;\n        const twinkle = particle.particlesOptions.twinkle.particles;\n        const twinkleFreq = twinkle.frequency;\n        const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n        const twinkling = twinkle.enable && Math.random() < twinkleFreq;\n        const radius = (_a = particle.bubble.radius) !== null && _a !== void 0 ? _a : particle.size.value;\n        const opacity = twinkling ? twinkle.opacity : (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : particle.opacity.value;\n        const infectionStage = particle.infectionStage;\n        const infection = options.infection;\n        const infectionStages = infection.stages;\n        const infectionColor = infectionStage !== undefined ? infectionStages[infectionStage].color : undefined;\n        const infectionRgb = Utils_1.ColorUtils.colorToRgb(infectionColor);\n        const color = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : Utils_1.ColorUtils.hslToRgb(pColor);\n        const colorValue = color !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(color, opacity) : undefined;\n        if (!this.context || !colorValue) {\n            return;\n        }\n        if (particle.links.length > 0) {\n            this.context.save();\n            for (const link of particle.links) {\n                if (particle.particlesOptions.links.triangles.enable) {\n                    const links = particle.links.map((l) => l.destination);\n                    const vertices = link.destination.links.filter((t) => links.indexOf(t.destination) >= 0);\n                    if (vertices.length) {\n                        for (const vertice of vertices) {\n                            this.drawLinkTriangle(particle, link, vertice);\n                        }\n                    }\n                }\n                this.drawLinkLine(particle, link);\n            }\n            this.context.restore();\n        }\n        Utils_1.CanvasUtils.drawParticle(this.container, this.context, particle, delta, colorValue, options.backgroundMask.enable, radius, opacity, particle.particlesOptions.shadow);\n    }\n    drawPlugin(plugin, delta) {\n        if (!this.context) {\n            return;\n        }\n        Utils_1.CanvasUtils.drawPlugin(this.context, plugin, delta);\n    }\n    paintBase(baseColor) {\n        if (this.context) {\n            Utils_1.CanvasUtils.paintBase(this.context, this.size, baseColor);\n        }\n    }\n    lineStyle(p1, p2) {\n        const options = this.container.options;\n        const connectOptions = options.interactivity.modes.connect;\n        if (this.context) {\n            return Utils_1.CanvasUtils.gradient(this.context, p1, p2, connectOptions.links.opacity);\n        }\n    }\n    initBackground() {\n        const options = this.container.options;\n        const background = options.background;\n        const element = this.element;\n        if (!element) {\n            return;\n        }\n        const elementStyle = element.style;\n        if (background.color) {\n            const color = Utils_1.ColorUtils.colorToRgb(background.color);\n            if (color) {\n                elementStyle.backgroundColor = Utils_1.ColorUtils.getStyleFromRgb(color, background.opacity);\n            }\n        }\n        if (background.image) {\n            elementStyle.backgroundImage = background.image;\n        }\n        if (background.position) {\n            elementStyle.backgroundPosition = background.position;\n        }\n        if (background.repeat) {\n            elementStyle.backgroundRepeat = background.repeat;\n        }\n        if (background.size) {\n            elementStyle.backgroundSize = background.size;\n        }\n    }\n}\nexports.Canvas = Canvas;\n"]},"metadata":{},"sourceType":"script"}